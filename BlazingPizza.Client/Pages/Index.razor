@page "/"
@inject HttpClient HttpClient //Defines property type and property name, in this case the dependency injection handles the directive call to HttpClient in Index
@inject NavigationManager NavigationManager


<!--h1>Blazing Pizzas</-->

<div class="main">
    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <li @onclick="@(() => ShowingConfigureDialog(special))"   style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => RemoveConfiguredPizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <button class="btn btn-warning" disabled="@(order.Pizzas.Count == 0)" @onclick="PlaceOrder">
            Order >
        </button>
    </div>
</div>

<!--Overlays Index page when selected-->
@if (showingConfiguringDialog)
{
    <ConfigurePizzaDialog Pizza="configuringPizza" OnCancel="CancelConfigurePizzaDialog" OnConfirm="ConfirmConfigurePizzaDialog"/>
}

@code{
    List<PizzaSpecial> specials; //Defined in BlazingPizza.Shared
    Pizza configuringPizza;
    bool showingConfiguringDialog;
    Order order = new Order();


    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>("specials", BlazingPizza.OrderContext.Default.ListPizzaSpecial);
    }

    void ShowingConfigureDialog(PizzaSpecial special)
    {
        configuringPizza = new Pizza()
            {
                Special = special,
                SpecialId = special.Id,
                Size = Pizza.DefaultSize,
                Toppings = new List<PizzaTopping>(),
            };

        showingConfiguringDialog = true;

    }

    void CancelConfigurePizzaDialog()
    {
        configuringPizza = null;
        showingConfiguringDialog = false;
    }

    void ConfirmConfigurePizzaDialog()
    {
        order.Pizzas.Add(configuringPizza);
        configuringPizza = null;
        showingConfiguringDialog = false;
    }

    void RemoveConfiguredPizza (Pizza configuredPizza)
    {
        order.Pizzas.Remove(configuredPizza);
    }

    async Task PlaceOrder()
    {
        //POST customer order to orders list in Minimal API
        var response = await HttpClient.PostAsJsonAsync("orders", order);
        var newOrderId = await response.Content.ReadFromJsonAsync<int>();
        order = new Order();
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
    }
}